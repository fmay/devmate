/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: a820d63b-eb0a-4d46-a057-01456d28ffd5
*/
package api.v1.finder.service;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Stream;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

@SuppressWarnings("unused")
public class FinderServiceTest {
	
//region Factories
	private static FinderService Mock() {

	}
//endregion

//region Scenarios
	//A new scenario
	@ParameterizedTest(name = "{1} [{index}] {2}")
	@MethodSource({"Scenario1Source"})
	public void Scenario1Test(Scenario1TestData data, String TestName, String TestDescription) {
		ActualResultStorage.setStorage(); //saves the results of the called Methods
		
		assertion(data, data.S1M1.methodName, data.C1, data.S1M1.expectedResult, data.S1M1.call());
	}
//endregion

//region Data

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	//A new scenario
	private static Stream<Arguments> Scenario1Source() {
		return Stream.of(
			Arguments.of(
				new Scenario1TestData(
					/* FinderService C1 = */ Mock(),
					/* S1M1 = */ new S1M1Parameters<>(
						/* String body = */ "",
						/* referencingMethodName = */ ""
						,
						/* expectedResult = */ new Result<>(
							/* assertType = */ AssertType.EXPECTED_VALUE,
							/* expectedReturnValue = */ ""
						)
					)
				),
				/* testCaseName = */ "p1",
				/* testCaseDescription = */ ""
			)
		);
	}
//endregion

//region Types

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	static class Scenario1TestData {
	    public final FinderService C1;
	    public final S1M1Parameters<Scenario1TestData> S1M1;
	    
	    public Scenario1TestData(FinderService C1, S1M1Parameters<Scenario1TestData> S1M1) {
	    	this.C1 = C1;
	    	this.S1M1 = S1M1;
	    }
	}

	static class S1M1Parameters<TestData> {
		public final String methodName = "S1M1";
	    public final ObjectWrapper<String> body;
	    public final Result<TestData, FinderService, String> expectedResult;
		public S1M1Parameters(String body, String referencingMethodName, Result<TestData, FinderService, String> expectedResult) {
			this.body = new ObjectWrapper<>(body, referencingMethodName);
	   		this.expectedResult = expectedResult;
	    }
	    
	    public ExceptionFunction<FinderService, String> call() {
	    	return i ->
	    	 i.runQuery(body.get());
		}
	}
//endregion

//region Utility Classes

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	public static class ObjectWrapper<T> {
		public T object;
		public String referencingMethodName;
		
		public ObjectWrapper(T object, String referencingMethodName) {
			this.object = object;
			this.referencingMethodName = referencingMethodName;
		}
		
		public T get() {
			return ActualResultStorage.getOrDefault(referencingMethodName, object);
		}
	}
	
	public static class ActualResultStorage {
		private static Map<String, Object> actualResultMap = new HashMap<>();
		
		public static void setStorage() {
			actualResultMap = new HashMap<>();
		}
		
		public static <T> void put(String key, T value) {
			actualResultMap.put(key, value);
		}
		
		@SuppressWarnings("unchecked")
		public static <T> T getOrDefault(String key, T defaultValue) {
			return (T) actualResultMap.getOrDefault(key, defaultValue);
		}
	}
	
	static class Result<TestData, TInstance, TReturn> {
		public final AssertType assertType;
		public final TReturn expectedReturnValue;
		public final Class<? extends Throwable> expectedException;
		public final BiConsumer<TInstance, TReturn> customAction;
		public final List<SideEffect<TestData>> sideEffects;
		
		public Result(AssertType assertType) {
			this(assertType, (TReturn) null, null);
		}
	
		public Result(AssertType assertType, List<SideEffect<TestData>> sideEffects) {
			this(assertType, (TReturn) null, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue) {
			this(assertType, expectedReturnValue, null);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException) {
			this(assertType, expectedException, null);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction) {
			this(assertType, customAction, null);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, List<SideEffect<TestData>> sideEffects) {
			this(assertType, expectedReturnValue, null, null, sideEffects);
		}
	
		public Result(AssertType assertType, Class<? extends Throwable> expectedException, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, expectedException, null, sideEffects);
		}
	
		public Result(AssertType assertType, BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this(assertType, null, null, customAction, sideEffects);
		}
	
		public Result(AssertType assertType, TReturn expectedReturnValue, Class<? extends Throwable> expectedException,
			BiConsumer<TInstance, TReturn> customAction, List<SideEffect<TestData>> sideEffects) {
			this.assertType = assertType;
			this.expectedReturnValue = expectedReturnValue;
			this.expectedException = expectedException;
			this.customAction = customAction;
			this.sideEffects = sideEffects;
		}
	}
	
	static class SideEffect<TestData> {
	    public final Object expectedValue;
	    public final Function<TestData, Object> actualValueAccessor;
	    
		public SideEffect(Object expectedValue, Function<TestData, Object> actualValueAccessor) {
			this.expectedValue = expectedValue;
			this.actualValueAccessor = actualValueAccessor;
		}
	}
	
	public enum AssertType {
	    EXCEPTION, EXPECTED_VALUE, CUSTOM_ASSERTION
	}
	
	static class VoidR {
	}
	
	private static <I> ExceptionFunction<I, VoidR> asFunc(ExceptionConsumer<I> action) {
		return i -> {
			action.accept(i);
			return null;
		};
	}
	
	@FunctionalInterface
	public interface ExceptionFunction<I, R> {
		R apply(I i) throws Exception;
	}
	
	@FunctionalInterface
	public interface ExceptionConsumer<I> {
		void accept(I i) throws Exception;
	}
	
	private <TestData, I, R> void assertion(TestData data, String methodName, I instance, Result<TestData, I, R> expectedResult, ExceptionFunction<I, R> toApply) {
		if (expectedResult == null) {
			ActualResultStorage.put(methodName, assertDoesNotThrow(() -> toApply.apply(instance)));
			return;
		}
		R actualResult = null;
		if (expectedResult.assertType.equals(AssertType.EXCEPTION)) {
			assertThrows(expectedResult.expectedException, () -> toApply.apply(instance));
		} else {
			actualResult = assertDoesNotThrow(() -> toApply.apply(instance));
			if (expectedResult.assertType.equals(AssertType.EXPECTED_VALUE) &&
					!(expectedResult.expectedReturnValue instanceof VoidR)) {
				assertEquals(expectedResult.expectedReturnValue, actualResult);
			} else if (expectedResult.assertType.equals(AssertType.CUSTOM_ASSERTION)) {
				expectedResult.customAction.accept(instance, actualResult);
			}
			if (expectedResult.sideEffects != null) {
				for (var sideEffect : expectedResult.sideEffects) {
					var sideEffectResult = sideEffect.actualValueAccessor.apply(data);
					assertEquals(sideEffect.expectedValue, sideEffectResult);
				}
			}
		}
		ActualResultStorage.put(methodName, actualResult);
	}
//endregion
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
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
40kFXfde/QkmXP8Pli4xqjoiAAA=
END_CODEGEN_DATA
*/
